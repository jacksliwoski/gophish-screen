var map = null;
var doPoll = true;
var statuses = {
    "Email Sent":          { color: "#1abc9c", label: "label-success",   icon: "fa-envelope",       point: "ct-point-sent"     },
    "Emails Sent":         { color: "#1abc9c", label: "label-success",   icon: "fa-envelope",       point: "ct-point-sent"     },
    "In progress":         { label: "label-primary" },
    "Queued":              { label: "label-info" },
    "Completed":           { label: "label-success" },
    "Email Opened":        { color: "#f9bf3b", label: "label-warning",   icon: "fa-envelope-open",  point: "ct-point-opened"   },
    "Clicked Link":        { color: "#F39C12",  label: "label-clicked",   icon: "fa-mouse-pointer", point: "ct-point-clicked"  },
    "Success":             { color: "#f05b4f",  label: "label-danger",    icon: "fa-exclamation",   point: "ct-point-clicked"  },
    "Email Reported":      { color: "#45d6ef",  label: "label-info",      icon: "fa-bullhorn",      point: "ct-point-reported" },
    "Error":               { color: "#6c7a89",  label: "label-default",   icon: "fa-times",         point: "ct-point-error"    },
    "Error Sending Email": { color: "#6c7a89",  label: "label-default",   icon: "fa-times",         point: "ct-point-error"    },
    "Submitted Data":      { color: "#f05b4f",  label: "label-danger",    icon: "fa-exclamation",   point: "ct-point-clicked"  },
    "Unknown":             { color: "#6c7a89",  label: "label-default",   icon: "fa-question",      point: "ct-point-error"    },
    "Sending":             { color: "#428bca",  label: "label-primary",   icon: "fa-spinner",       point: "ct-point-sending"  },
    "Retrying":            { color: "#6c7a89",  label: "label-default",   icon: "fa-clock-o",       point: "ct-point-error"    },
    "Scheduled":           { color: "#428bca",  label: "label-primary",   icon: "fa-clock-o",       point: "ct-point-sending"  },
    "Campaign Created":    { label: "label-success", icon: "fa-rocket" }
};
var statusMapping = {
    "Email Sent":      "sent",
    "Email Opened":    "opened",
    "Clicked Link":    "clicked",
    "Submitted Data":  "submitted_data",
    "Email Reported":  "reported"
};

function computeScreenedCountFromTimeline(timeline) {
    var seenEmails = new Set();
    timeline.forEach(function(evt) {
        // Some versions of Gophish attach "is_screened" directly on each event
        // (true/false). Only count it once per email.
        if (evt.is_screened === true && evt.email) {
            seenEmails.add(evt.email);
        }
    });
    return seenEmails.size;
}

var progressListing = ["Email Sent", "Email Opened", "Clicked Link", "Submitted Data"];
var campaign = {};
var bubbles = [];

// ─────────────────────────────────────────────────────────────
// Hide/clear modals
function dismiss() {
    $("#modal\\.flashes").empty();
    $("#modal").modal("hide");
    $("#resultsTable").dataTable().DataTable().clear().draw();
}

// ─────────────────────────────────────────────────────────────
// Delete campaign
function deleteCampaign() {
    Swal.fire({
        title: "Are you sure?",
        text: "This will delete the campaign. This can't be undone!",
        type: "warning",
        animation: false,
        showCancelButton: true,
        confirmButtonText: "Delete Campaign",
        confirmButtonColor: "#428bca",
        reverseButtons: true,
        allowOutsideClick: false,
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve, reject) {
                api.campaignId.delete(campaign.id)
                    .success(function(msg) {
                        resolve();
                    })
                    .error(function(data) {
                        reject(data.responseJSON.message);
                    });
            });
        }
    }).then(function(result) {
        if (result.value) {
            Swal.fire("Campaign Deleted!", "This campaign has been deleted!", "success");
        }
        $('button:contains("OK")').on("click", function() {
            location.href = "/campaigns";
        });
    });
}

// ─────────────────────────────────────────────────────────────
// Complete campaign
function completeCampaign() {
    Swal.fire({
        title: "Are you sure?",
        text: "Gophish will stop processing events for this campaign",
        type: "warning",
        animation: false,
        showCancelButton: true,
        confirmButtonText: "Complete Campaign",
        confirmButtonColor: "#428bca",
        reverseButtons: true,
        allowOutsideClick: false,
        showLoaderOnConfirm: true,
        preConfirm: function() {
            return new Promise(function(resolve, reject) {
                api.campaignId.complete(campaign.id)
                    .success(function(msg) {
                        resolve();
                    })
                    .error(function(data) {
                        reject(data.responseJSON.message);
                    });
            });
        }
    }).then(function(result) {
        if (result.value) {
            Swal.fire("Campaign Completed!", "This campaign has been completed!", "success");
            $("#complete_button")[0].disabled = true;
            $("#complete_button").text("Completed!");
            doPoll = false;
        }
    });
}

// ─────────────────────────────────────────────────────────────
// Export CSV
function exportAsCSV(scope) {
    var exportHTML = $("#exportButton").html();
    var csvScope = null;
    var filename = campaign.name + " - " + capitalize(scope) + ".csv";
    switch (scope) {
        case "results":
            csvScope = campaign.results;
            break;
        case "events":
            csvScope = campaign.timeline;
            break;
    }
    if (!csvScope) {
        return;
    }
    $("#exportButton").html('<i class="fa fa-spinner fa-spin"></i>');
    var csvString = Papa.unparse(csvScope, { escapeFormulae: true });
    var csvData = new Blob([csvString], { type: "text/csv;charset=utf-8;" });
    if (navigator.msSaveBlob) {
        navigator.msSaveBlob(csvData, filename);
    } else {
        var csvURL = window.URL.createObjectURL(csvData);
        var dlLink = document.createElement("a");
        dlLink.href = csvURL;
        dlLink.setAttribute("download", filename);
        document.body.appendChild(dlLink);
        dlLink.click();
        document.body.removeChild(dlLink);
    }
    $("#exportButton").html(exportHTML);
}

// ─────────────────────────────────────────────────────────────
// Replay “Submitted Data”
function replay(event_idx) {
    var request = campaign.timeline[event_idx];
    var details = JSON.parse(request.details);
    var url = null;
    var form = $("<form>").attr({ method: "POST", target: "_blank" });
    $.each(Object.keys(details.payload), function(i, param) {
        if (param === "rid") {
            return true;
        }
        if (param === "__original_url") {
            url = details.payload[param];
            return true;
        }
        $("<input>").attr({ name: param }).val(details.payload[param]).appendTo(form);
    });
    Swal.fire({
        title: "Where do you want the credentials submitted to?",
        input: "text",
        showCancelButton: true,
        inputPlaceholder: "http://example.com/login",
        inputValue: url || "",
        inputValidator: function(value) {
            return new Promise(function(resolve, reject) {
                if (value) {
                    resolve();
                } else {
                    reject("Invalid URL.");
                }
            });
        }
    }).then(function(result) {
        if (result.value) {
            url = result.value;
            form.attr({ action: url });
            form.appendTo("body").submit().remove();
        }
    });
}

// ─────────────────────────────────────────────────────────────
// Render device details in the timeline
var renderDevice = function(event_details) {
    var ua = UAParser(event_details.browser["user-agent"]);
    var detailsString = '<div class="timeline-device-details">';
    var deviceIcon = "laptop";
    if (ua.device.type) {
        if (ua.device.type === "tablet" || ua.device.type === "mobile") {
            deviceIcon = ua.device.type;
        }
    }
    var deviceVendor = "";
    if (ua.device.vendor) {
        deviceVendor = ua.device.vendor.toLowerCase();
        if (deviceVendor === "microsoft") deviceVendor = "windows";
    }
    var deviceName = "Unknown";
    if (ua.os.name) {
        deviceName = ua.os.name;
        if (deviceName === "Mac OS") {
            deviceVendor = "apple";
        } else if (deviceName === "Windows") {
            deviceVendor = "windows";
        }
        if (ua.device.vendor && ua.device.model) {
            deviceName = ua.device.vendor + " " + ua.device.model;
        }
    }
    if (ua.os.version) {
        deviceName += " (OS Version: " + ua.os.version + ")";
    }
    var osString = '<div class="timeline-device-os"><span class="fa fa-stack">' +
        '<i class="fa fa-' + escapeHtml(deviceIcon) + ' fa-stack-2x"></i>' +
        '<i class="fa fa-vendor-icon fa-' + escapeHtml(deviceVendor) + ' fa-stack-1x"></i>' +
        "</span> " + escapeHtml(deviceName) + "</div>";
    detailsString += osString;
    var deviceBrowser = "Unknown";
    var browserIcon = "info-circle";
    var browserVersion = "";
    if (ua.browser && ua.browser.name) {
        deviceBrowser = ua.browser.name.replace("Mobile ", "");
        if (deviceBrowser) {
            browserIcon = deviceBrowser.toLowerCase();
            if (browserIcon === "ie") browserIcon = "internet-explorer";
        }
        browserVersion = "(Version: " + ua.browser.version + ")";
    }
    var browserString = '<div class="timeline-device-browser"><span class="fa fa-stack">' +
        '<i class="fa fa-' + escapeHtml(browserIcon) + ' fa-stack-1x"></i></span> ' +
        deviceBrowser + " " + browserVersion + "</div>";
    detailsString += browserString;
    detailsString += "</div>";
    return detailsString;
};

// ─────────────────────────────────────────────────────────────
// Render per-recipient timeline
function renderTimeline(data) {
    var record = {
        id:         data[0],
        first_name: data[2],
        last_name:  data[3],
        email:      data[4],
        position:   data[5],
        status:     data[6],
        reported:   data[7],
        send_date:  data[8]
    };
    var resultsHtml = '<div class="timeline col-sm-12 well well-lg">' +
        '<h6>Timeline for ' + escapeHtml(record.first_name) + ' ' + escapeHtml(record.last_name) + '</h6>' +
        '<span class="subtitle">Email: ' + escapeHtml(record.email) + '<br>Result ID: ' + escapeHtml(record.id) + '</span>' +
        '<div class="timeline-graph col-sm-6">';
    $.each(campaign.timeline, function(i, event) {
        if (!event.email || event.email !== record.email) {
            return true;
        }
        resultsHtml += '<div class="timeline-entry">' +
            '<div class="timeline-bar"></div>' +
            '<div class="timeline-icon ' + statuses[event.message].label + '">' +
            '<i class="fa ' + statuses[event.message].icon + '"></i></div>' +
            '<div class="timeline-message">' + escapeHtml(event.message) +
            '<span class="timeline-date">' +
            moment.utc(event.time).local().format("MMMM Do YYYY h:mm:ss a") +
            '</span>';
        if (event.details) {
            var details = JSON.parse(event.details);
            // Device details for Clicked Link / Submitted Data
            if (event.message === "Clicked Link" || event.message === "Submitted Data") {
                var deviceView = renderDevice(details);
                if (deviceView) {
                    resultsHtml += deviceView;
                }
            }
            // “Replay Credentials” for Submitted Data
            if (event.message === "Submitted Data") {
                resultsHtml += '<div class="timeline-replay-button">' +
                    '<button onclick="replay(' + i + ')" class="btn btn-success">' +
                    '<i class="fa fa-refresh"></i> Replay Credentials</button></div>' +
                    '<div class="timeline-event-details"><i class="fa fa-caret-right"></i> View Details</div>';
                if (details.payload) {
                    resultsHtml += '<div class="timeline-event-results"><table class="table table-condensed table-bordered table-striped">' +
                        "<thead><tr><th>Parameter</th><th>Value(s)</th></tr></thead><tbody>";
                    Object.keys(details.payload).forEach(function(param) {
                        if (param === "rid") {
                            return;
                        }
                        resultsHtml += "<tr><td>" + escapeHtml(param) + "</td><td>" +
                            escapeHtml(details.payload[param]) + "</td></tr>";
                    });
                    resultsHtml += "</tbody></table></div>";
                }
            }
            // Error details
            if (details.error) {
                resultsHtml += '<div class="timeline-event-details"><i class="fa fa-caret-right"></i> View Details</div>' +
                    '<div class="timeline-event-results">' +
                    '<span class="label label-default">Error</span> ' + details.error +
                    "</div>";
            }
        }
        resultsHtml += "</div></div>";
    });
    // If Scheduled/Retrying, show send_date
    if (record.status === "Scheduled" || record.status === "Retrying") {
        resultsHtml += '<div class="timeline-entry">' +
            '<div class="timeline-bar"></div>' +
            '<div class="timeline-icon ' + statuses[record.status].label + '">' +
            '<i class="fa ' + statuses[record.status].icon + '"></i></div>' +
            '<div class="timeline-message">Scheduled to send at ' + record.send_date + "</div></div>";
    }
    resultsHtml += "</div>";
    return resultsHtml;
}

// ─────────────────────────────────────────────────────────────
// Render the campaign timeline chart
var renderTimelineChart = function(chartopts) {
    return Highcharts.chart("timeline_chart", {
        chart: {
            zoomType: "x",
            type: "line",
            height: "200px"
        },
        title: { text: "Campaign Timeline" },
        xAxis: {
            type: "datetime",
            dateTimeLabelFormats: {
                second: "%l:%M:%S",
                minute: "%l:%M",
                hour:   "%l:%M",
                day:    "%b %d, %Y",
                week:   "%b %d, %Y",
                month:  "%b %Y"
            }
        },
        yAxis: {
            visible: false,
            min: 0,
            max: 2,
            tickInterval: 1,
            labels: { enabled: false },
            title:  { text: "" }
        },
        tooltip: {
            formatter: function() {
                return Highcharts.dateFormat("%A, %b %d %l:%M:%S %P", new Date(this.x)) +
                       "<br>Event: " + this.point.message +
                       "<br>Email: <b>" + this.point.email + "</b>";
            }
        },
        legend: { enabled: false },
        plotOptions: {
            series: {
                marker: {
                    enabled: true,
                    symbol: "circle",
                    radius: 3
                },
                cursor: "pointer"
            },
            line: {
                states: {
                    hover: { lineWidth: 1 }
                }
            }
        },
        credits: { enabled: false },
        series: [{
            data:       chartopts["data"],
            dashStyle:  "shortdash",
            color:      "#cccccc",
            lineWidth:  1,
            turboThreshold: 0
        }]
    });
};

// ─────────────────────────────────────────────────────────────
// Render a pie chart with a large central number
var renderPieChart = function(chartopts) {
    return Highcharts.chart(chartopts["elemId"], {
        chart: {
            type: "pie",
            events: {
                load: function() {
                    var chart = this,
                        rend  = chart.renderer,
                        pie   = chart.series[0],
                        left  = chart.plotLeft + pie.center[0],
                        top   = chart.plotTop + pie.center[1];
                    this.innerText = rend.text(chartopts["data"][0].count, left, top).attr({
                        "text-anchor": "middle",
                        "font-size":   "24px",
                        "font-weight": "bold",
                        "fill":        chartopts["colors"][0],
                        "font-family":"Helvetica,Arial,sans-serif"
                    }).add();
                },
                render: function() {
                    this.innerText.attr({ text: chartopts["data"][0].count });
                }
            }
        },
        title: { text: chartopts["title"] },
        plotOptions: {
            pie: {
                innerSize: "80%",
                dataLabels: { enabled: false }
            }
        },
        credits: { enabled: false },
        tooltip: {
            formatter: function() {
                if (this.key === undefined) { return false; }
                return '<span style="color:' + this.color + '">●</span> ' +
                       this.point.name + ": <b>" + this.y + "%</b><br/>";
            }
        },
        series: [{ data: chartopts["data"], colors: chartopts["colors"] }]
    });
};

// ─────────────────────────────────────────────────────────────
// Update map bubbles
var updateMap = function(results) {
    if (!map) { return; }
    bubbles = [];
    $.each(campaign.results, function(i, result) {
        if (result.latitude == 0 && result.longitude == 0) {
            return true;
        }
        var found = false;
        for (var k = 0; k < bubbles.length; k++) {
            if (bubbles[k].name === result.ip) {
                bubbles[k].radius += 1;
                found = true;
                break;
            }
        }
        if (!found) {
            bubbles.push({
                latitude:  result.latitude,
                longitude: result.longitude,
                name:      result.ip,
                fillKey:   "point",
                radius:    2
            });
        }
    });
    map.bubbles(bubbles);
};

// ─────────────────────────────────────────────────────────────
// Create a <span class="label …"> … </span> for a given status
function createStatusLabel(status, send_date) {
    var labelClass = statuses[status] ? statuses[status].label : "label-default";
    var html = '<span class="label ' + labelClass + '"';
    if (status === "Scheduled" || status === "Retrying") {
        html += ' data-toggle="tooltip" data-placement="top" data-html="true" ' +
                'title="Scheduled to send at ' + send_date + '"';
    }
    html += '>' + status + '</span>';
    return html;
}

// ─────────────────────────────────────────────────────────────
// Polling: update timeline + donuts + table + map
function poll() {
    api.campaignId.results(campaign.id).success(function(c) {
        campaign = c;

        // ─── Update timeline data ───
        var timeline_series_data = [];
        $.each(campaign.timeline, function(i, event) {
            var event_date = moment.utc(event.time).local();
            timeline_series_data.push({
                email:   event.email,
                message: event.message,
                x:       event_date.valueOf(),
                y:       1,
                marker: { fillColor: statuses[event.message] ? statuses[event.message].color : "#cccccc" }
            });
        });
        var timelineChart = $("#timeline_chart").highcharts();
        if (timelineChart && timelineChart.series.length) {
            timelineChart.series[0].update({ data: timeline_series_data });
        }

        // ─── Build email_series_data ───
        var email_series_data = {};
        Object.keys(statusMapping).forEach(function(k) {
            email_series_data[k] = 0;
        });
        $.each(campaign.results, function(i, result) {
            email_series_data[result.status]++;
            if (result.reported) {
                email_series_data["Email Reported"]++;
            }
            var step = progressListing.indexOf(result.status);
            for (var j = 0; j < step; j++) {
                email_series_data[progressListing[j]]++;
            }
        });

        // ─── Compute the four “donut” metrics from campaign.results ───
        var totalSent      = (campaign.results && campaign.results.length) ? campaign.results.length : 0;
        // “Real Opens” = number of results whose status is “Email Opened”
        var ro             = email_series_data["Email Opened"] || 0;
        // “Screened” = max(opened_screened, clicked_screened) → we approximate by counting any status that follows “opened_screened” or “clicked_screened”
        var screenedCount = computeScreenedCountFromTimeline(campaign.timeline);
        // “Real Clicks” = number of results whose status is “Clicked Link”
        var rc             = email_series_data["Clicked Link"] || 0;
        var denominator    = (totalSent > 0) ? totalSent : 1;

        // ─── Update Four Campaign‐Specific Donuts ───

        // 1) Email Sent
        renderPieChart({
            elemId: "sent_chart",
            title:  "Email Sent",
            data: [
                { name: "Sent", y: Math.floor((totalSent / denominator) * 100), count: totalSent },
                { name: "",     y: 100 - Math.floor((totalSent / denominator) * 100) }
            ],
            colors: ["#1abc9c", "#dddddd"]
        });

        // 2) Email Screened
        renderPieChart({
            elemId: "screened_chart",
            title:  "Email Screened",
            data: [
                { name: "Screened",      y: Math.floor((screenedCount / denominator) * 100), count: screenedCount },
                { name: "Not Screened",  y: 100 - Math.floor((screenedCount / denominator) * 100) }
            ],
            colors: ["#FF9800", "#dddddd"]
        });

        // 3) Email Opened (Real)
        renderPieChart({
            elemId: "opened_chart",
            title:  "Email Opened",
            data: [
                { name: "Real Opens", y: Math.floor((ro / denominator) * 100), count: ro },
                { name: "",           y: 100 - Math.floor((ro / denominator) * 100) }
            ],
            colors: ["#4CAF50", "#dddddd"]
        });

        // 4) Link Clicked (Real)
        renderPieChart({
            elemId: "clicked_chart",
            title:  "Link Clicked",
            data: [
                { name: "Real Clicks", y: Math.floor((rc / denominator) * 100), count: rc },
                { name: "",            y: 100 - Math.floor((rc / denominator) * 100) }
            ],
            colors: ["#f05b4f", "#dddddd"]
        });

        // ─── Always update the “reported” donut if you are tracking it ───
        var reportedCount = email_series_data["Email Reported"] || 0;
        renderPieChart({
            elemId: "reported_chart",
            title:  "Email Reported",
            data: [
                { name: "Reported", y: Math.floor((reportedCount / denominator) * 100), count: reportedCount },
                { name: "",         y: 100 - Math.floor((reportedCount / denominator) * 100) }
            ],
            colors: ["#45d6ef", "#dddddd"]
        });

        // ─── Update DataTable rows ───
        var resultsTable = $("#resultsTable").DataTable();
        resultsTable.rows().every(function(i, tableLoop, rowLoop) {
            var row = this.row(i);
            var rowData = row.data();
            var rid = rowData[0];
            $.each(campaign.results, function(j, result) {
                if (result.id == rid) {
                    rowData[8] = moment(result.send_date).format("MMMM Do YYYY, h:mm:ss a");
                    rowData[7] = result.reported;
                    rowData[6] = result.status;
                    resultsTable.row(i).data(rowData);
                    if (row.child.isShown()) {
                        $(row.node()).find("#caret")
                            .removeClass("fa-caret-right")
                            .addClass("fa-caret-down");
                        row.child(renderTimeline(row.data())).show();
                    }
                    return false;
                }
            });
        });
        resultsTable.draw(false);

        // ─── Update Map Bubbles ───
        if (map) {
            updateMap(campaign.results);
        }

        // Re-enable tooltip & Refresh button
        $('[data-toggle="tooltip"]').tooltip();
        $("#refresh_message").hide();
        $("#refresh_btn").show();
    }).error(function() {
        console.error("Failed to fetch campaign results");
    });
}

// ─────────────────────────────────────────────────────────────
// Called on initial load: fetch results, render chart + donuts
function load() {
    campaign.id = window.location.pathname.split("/").slice(-1)[0];
    var use_map = JSON.parse(localStorage.getItem("gophish.use_map"));

    api.campaignId.results(campaign.id).success(function(c) {
        campaign = c;
        if (campaign) {
            $("title").text(c.name + " - Gophish");
            $("#loading").hide();
            $("#campaignResults").show();
            $("#page-title").text("Results for " + c.name);
            if (c.status === "Completed") {
                $("#complete_button")[0].disabled = true;
                $("#complete_button").text("Completed!");
                doPoll = false;
            }

            // Toggle “view details” rows
            $("#resultsTable").on("click", ".timeline-event-details", function() {
                var payloadResults = $(this).parent().find(".timeline-event-results");
                if (payloadResults.is(":visible")) {
                    $(this).find("i").removeClass("fa-caret-down").addClass("fa-caret-right");
                    payloadResults.hide();
                } else {
                    $(this).find("i").removeClass("fa-caret-right").addClass("fa-caret-down");
                    payloadResults.show();
                }
            });

            // Initialize DataTable without data, then populate
            var resultsTable = $("#resultsTable").DataTable({
                destroy: true,
                order: [[2, "asc"]],
                columnDefs: [
                    { orderable: false, targets: "no-sort" },
                    { className: "details-control", targets: [1] },
                    { visible: false, targets: [0, 8] },
                    {
                        render: function(data, type, row) {
                            return createStatusLabel(data, row[8]);
                        },
                        targets: [6]
                    },
                    {
                        className: "text-center",
                        render: function(reported, type, row) {
                            if (type == "display") {
                                if (reported) {
                                    return "<i class='fa fa-check-circle text-center text-success'></i>";
                                }
                                return "<i role='button' class='fa fa-times-circle text-center text-muted' onclick='report_mail(\"" + row[0] + '", "' + campaign.id + "\");'></i>";
                            }
                            return reported;
                        },
                        targets: [7]
                    }
                ]
            });
            resultsTable.clear();

            // Populate DataTable and build email_series_data for first render
            var email_series_data = {};
            Object.keys(statusMapping).forEach(function(k) {
                email_series_data[k] = 0;
            });
            var timeline_series_data = [];
            $.each(campaign.results, function(i, result) {
                resultsTable.row.add([
                    result.id,
                    '<i id="caret" class="fa fa-caret-right"></i>',
                    escapeHtml(result.first_name) || "",
                    escapeHtml(result.last_name)  || "",
                    escapeHtml(result.email)      || "",
                    escapeHtml(result.position)   || "",
                    result.status,
                    result.reported,
                    moment(result.send_date).format("MMMM Do YYYY, h:mm:ss a")
                ]);
                email_series_data[result.status]++;
                if (result.reported) {
                    email_series_data["Email Reported"]++;
                }
                var step = progressListing.indexOf(result.status);
                for (var j = 0; j < step; j++) {
                    email_series_data[progressListing[j]]++;
                }
            });
            resultsTable.draw();
            $('[data-toggle="tooltip"]').tooltip();

            // Attach row‐expansion handler
            $("#resultsTable tbody").on("click", "td.details-control", function() {
                var tr = $(this).closest("tr");
                var row = resultsTable.row(tr);
                if (row.child.isShown()) {
                    row.child.hide();
                    tr.removeClass("shown");
                    $(this).find("i").removeClass("fa-caret-down").addClass("fa-caret-right");
                } else {
                    $(this).find("i").removeClass("fa-caret-right").addClass("fa-caret-down");
                    row.child(renderTimeline(row.data())).show();
                    tr.addClass("shown");
                }
            });

            // Build initial timeline chart data
            $.each(campaign.timeline, function(i, event) {
                if (event.message === "Campaign Created") {
                    return true;
                }
                var event_date = moment.utc(event.time).local();
                timeline_series_data.push({
                    email:   event.email,
                    message: event.message,
                    x:       event_date.valueOf(),
                    y:       1,
                    marker:  { fillColor: statuses[event.message] ? statuses[event.message].color : "#cccccc" }
                });
            });
            renderTimelineChart({ data: timeline_series_data });

            // Compute all four donut metrics from campaign.results
            var totalSent     = (campaign.results && campaign.results.length) ? campaign.results.length : 0;
            var ro            = email_series_data["Email Opened"] || 0;
            var rc            = email_series_data["Clicked Link"]  || 0;
            var scOpens       = 0, scClicks = 0, screenedCount = 0;
            var screenedCount = computeScreenedCountFromTimeline(campaign.timeline);
            var reportedCount = email_series_data["Email Reported"] || 0;
            var denominator   = (totalSent > 0) ? totalSent : 1;

            // 1) Email Sent
            renderPieChart({
                elemId: "sent_chart",
                title:  "Email Sent",
                data: [
                    { name: "Sent", y: Math.floor((totalSent / denominator) * 100), count: totalSent },
                    { name: "",     y: 100 - Math.floor((totalSent / denominator) * 100) }
                ],
                colors: ["#1abc9c", "#dddddd"]
            });

            // 2) Email Screened
            renderPieChart({
                elemId: "screened_chart",
                title:  "Email Screened",
                data: [
                    { name: "Screened",     y: Math.floor((screenedCount / denominator) * 100), count: screenedCount },
                    { name: "Not Screened", y: 100 - Math.floor((screenedCount / denominator) * 100) }
                ],
                colors: ["#FF9800", "#dddddd"]
            });

            // 3) Email Opened (Real)
            renderPieChart({
                elemId: "opened_chart",
                title:  "Email Opened",
                data: [
                    { name: "Real Opens", y: Math.floor((ro / denominator) * 100), count: ro },
                    { name: "",           y: 100 - Math.floor((ro / denominator) * 100) }
                ],
                colors: ["#4CAF50", "#dddddd"]
            });

            // 4) Link Clicked (Real)
            renderPieChart({
                elemId: "clicked_chart",
                title:  "Link Clicked",
                data: [
                    { name: "Real Clicks", y: Math.floor((rc / denominator) * 100), count: rc },
                    { name: "",            y: 100 - Math.floor((rc / denominator) * 100) }
                ],
                colors: ["#f05b4f", "#dddddd"]
            });

            // 5) Email Reported
            renderPieChart({
                elemId: "reported_chart",
                title:  "Email Reported",
                data: [
                    { name: "Reported", y: Math.floor((reportedCount / denominator) * 100), count: reportedCount },
                    { name: "",         y: 100 - Math.floor((reportedCount / denominator) * 100) }
                ],
                colors: ["#45d6ef", "#dddddd"]
            });

            // If map is enabled, show it
            if (use_map) {
                $("#resultsMapContainer").show();
                map = new Datamap({
                    element:           document.getElementById("resultsMap"),
                    responsive:        true,
                    fills:             { defaultFill: "#ffffff", point: "#283F50" },
                    geographyConfig:   { highlightFillColor: "#1abc9c", borderColor: "#283F50" },
                    bubblesConfig:     { borderColor: "#283F50" }
                });
                updateMap(campaign.results);
            }
        }
    }).error(function() {
        $("#loading").hide();
        errorFlash("Campaign not found!");
    });
}

var setRefresh;
function refresh() {
    if (!doPoll) { return; }
    $("#refresh_message").show();
    $("#refresh_btn").hide();
    poll();
    clearTimeout(setRefresh);
    setRefresh = setTimeout(refresh, 60000);
}

function report_mail(rid, cid) {
    Swal.fire({
        title: "Are you sure?",
        text: "This result will be flagged as reported (RID: " + rid + ")",
        type: "question",
        animation: false,
        showCancelButton: true,
        confirmButtonText: "Continue",
        confirmButtonColor: "#428bca",
        reverseButtons: true,
        allowOutsideClick: false,
        showLoaderOnConfirm: true
    }).then(function(result) {
        if (result.value) {
            api.campaignId.get(cid).success(function(c) {
                var report_url = new URL(c.url);
                report_url.pathname = "/report";
                report_url.search = "?rid=" + rid;
                fetch(report_url).then(response => {
                    if (!response.ok) {
                        throw new Error("HTTP error! Status: " + response.status);
                    }
                    refresh();
                }).catch(error => {
                    var errorMessage = error.message;
                    if (error.message === "Failed to fetch") {
                        errorMessage = "This might be due to Mixed Content issues or network problems.";
                    }
                    Swal.fire({ title: "Error", text: errorMessage, type: "error", confirmButtonText: "Close" });
                });
            });
        }
    });
}

$(document).ready(function() {
    Highcharts.setOptions({ global: { useUTC: false } });
    load();
    setRefresh = setTimeout(refresh, 60000);
});
